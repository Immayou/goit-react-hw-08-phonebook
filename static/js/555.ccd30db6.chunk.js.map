{"version":3,"file":"static/js/555.ccd30db6.chunk.js","mappings":"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","sources":["redux/Contacts/contactSelectors.js","components/TopBox/TopBox.styled.js","components/TopBox/TopBox.jsx","components/BottomBox/BottomBox.styled.js","components/BottomBox/BottomBox.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","import styled from '@emotion/styled';\nimport imgWrapper from '../../images/wrapper.jpg';\n\nexport const CoverBox = styled.section`\n  width: 90%;\n  padding: 10px;\n  margin: 0 auto 20px auto;\n  background-image: url(${imgWrapper});\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n\n  border: 3px solid #333333;\n  font-size: 2.5rem;\n  border-radius: 2% 6% 5% 4% / 1% 1% 2% 4%;\n  text-transform: uppercase;\n  letter-spacing: 0.3ch;\n  @media screen and (min-width: 480px) {\n    width: 400px;\n    padding: 10px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 500px;\n    padding: 4rem 7rem;\n  }\n`;\n","import { CoverBox } from './TopBox.styled';\n\nconst TopBox = ({ children }) => {\n  return <CoverBox>{children}</CoverBox>;\n};\n\nexport default TopBox;\n","import styled from '@emotion/styled';\n\nexport const CoverBox = styled.section`\n  width: 90%;\n  margin: 0 auto;\n  background-color: #6ca1bb;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  padding: 10px;\n  border: 3px solid #333333;\n  font-size: 2.5rem;\n  border-radius: 1% 1% 2% 4% / 2% 6% 5% 4%;\n  text-transform: uppercase;\n  letter-spacing: 0.3ch;\n  &:not(:last-of-type) {\n    margin-bottom: 20px;\n  }\n  letter-spacing: 0.1ch;\n\n  @media screen and (min-width: 480px) {\n    width: 400px;\n    padding: 10px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 500px;\n    padding: 4rem 3rem;\n  }\n`;\n","import { CoverBox } from './BottomBox.styled';\n\nconst BottomBox = ({ children }) => {\n  return <CoverBox>{children}</CoverBox>;\n};\n\nexport default BottomBox;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { ToastContainer } from 'react-toastify';\n\nexport const StyledContainer = styled(ToastContainer)`\n  font-size: 20px;\n  letter-spacing: 0.1ch;\n  text-transform: none;\n`;\n\nexport const Title = styled.h1`\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  margin-bottom: 20px;\n  font-size: 30px;\n  font-weight: 500;\n  line-height: 1.33;\n  @media screen and (min-width: 480px) {\n    font-size: 40px;\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 46px;\n  }\n`;\n\nexport const PhoneForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  border-radius: 5px;\n`;\n\nexport const FormLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 12px;\n  line-height: 1.17;\n  text-align: start;\n\n  @media screen and (min-width: 480px) {\n    font-size: 15px;\n  }\n`;\n\nexport const InputNameField = styled(Field)`\n  padding-left: 0 0 0 10px;\n  margin-bottom: 30px;\n  background: #e9eff6;\n  line-height: 40px;\n  border-width: 1px;\n  font-size: 18px;\n  border-radius: 12px;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\nexport const InputNumberField = styled(Field)`\n  padding-left: 0 0 0 10px;\n  margin-bottom: 30px;\n  background: #e9eff6;\n  line-height: 40px;\n  border-width: 1px;\n  border-radius: 12px;\n  font-size: 18px;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\nexport const FormButton = styled.button`\n  margin: 0 auto;\n  width: 40%;\n  height: 40px;\n  border-radius: 7px;\n  font-family: inherit;\n  text-transform: uppercase;\n  background: #c5dde8;\n  border-bottom: 2px solid gray;\n  border-radius: 12px;\n  color: #000000;\n  line-height: 1.17;\n  letter-spacing: 0.3ch;\n  font-size: 12px;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    background-color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    letter-spacing 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n    color: grey;\n    background-color: #eecfba;\n    letter-spacing: 0.2ch;\n  }\n  @media screen and (min-width: 768px) {\n    letter-spacing: 0.2ch;\n    font-size: 15px;\n  }\n`;\n","import { Formik } from 'formik';\nimport { FaFeather } from 'react-icons/fa';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TiPhoneOutline } from 'react-icons/ti';\nimport {\n  getContacts,\n  getIsLoading,\n} from '../../redux/Contacts/contactSelectors';\nimport { addNewContact } from '../../redux/Contacts/operations';\nimport { notifyErrorIfNewContactAlreadyExists } from '../../notificationMessages/notificationMessages';\nimport {\n  Title,\n  PhoneForm,\n  FormLabel,\n  InputNameField,\n  InputNumberField,\n  FormButton,\n  StyledContainer,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const addedContacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContactAlreadyExists = addedContacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (newContactAlreadyExists) {\n      notifyErrorIfNewContactAlreadyExists(values.name);\n    } else {\n      dispatch(addNewContact(values));\n    }\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        <PhoneForm>\n          <StyledContainer autoClose={2000} />\n          <Title>\n            <TiPhoneOutline size={40} /> Phonebook\n          </Title>\n          <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n          <InputNameField\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <FormLabel htmlFor={numberInputId}>Number</FormLabel>\n          <InputNumberField\n            id={numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <FormButton type=\"submit\" disabled={isLoading}>\n            <FaFeather style={{ marginRight: '5px' }} />\n            <span>Add contact</span>\n          </FormButton>\n        </PhoneForm>\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { ToastContainer } from 'react-toastify';\n\nexport const StyledContainer = styled(ToastContainer)`\n  font-size: 20px;\n  letter-spacing: 0.1ch;\n  text-transform: none;\n`;\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalCloseButton = styled.button`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 30px;\n  height: 30px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e9eff6;\n  border-radius: 50%;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    background-color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    letter-spacing 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n    color: grey;\n    background-color: #eecfba;\n    letter-spacing: 0.1ch;\n  }\n`;\n\nexport const WrapperLeft = styled.div`\n  @media screen and (min-width: 480px) {\n    content: '';\n    position: absolute;\n    width: 50px;\n    height: 20px;\n    background: #ffffff;\n    border-radius: 20px;\n    bottom: 60px;\n    left: -30px;\n    &:after {\n      content: '';\n      position: absolute;\n      width: 50px;\n      height: 20px;\n      border-radius: 30px;\n      background: white;\n      top: 20px;\n      left: 10px;\n    }\n    &:before {\n      content: '';\n      position: absolute;\n      width: 50px;\n      height: 20px;\n      border-radius: 30px;\n      background: white;\n\n      top: -20px;\n    }\n  }\n`;\n\nexport const WrapperRight = styled.div`\n  @media screen and (min-width: 480px) {\n    content: '';\n    position: absolute;\n    width: 50px;\n    height: 20px;\n    background: #ffffff;\n    border-radius: 20px;\n    top: 60px;\n    right: -30px;\n    &:after {\n      top: 20px;\n      right: 10px;\n      content: '';\n      position: absolute;\n      width: 50px;\n      height: 20px;\n      border-radius: 30px;\n      background: white;\n    }\n    &:before {\n      top: -20px;\n      right: 0;\n      content: '';\n      position: absolute;\n      width: 50px;\n      height: 20px;\n      border-radius: 30px;\n      background: white;\n    }\n  }\n`;\n\nexport const FormBox = styled(Form)`\n  position: relative;\n  width: 250px;\n  margin: 50px auto 0 auto;\n  background: white;\n  border-radius: 30px;\n  letter-spacing: 0.3ch;\n  text-transform: uppercase;\n  &:hover {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12),\n      0px 4px 10px rgba(0, 0, 0, 0.06), 1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n  @media screen and (min-width: 480px) {\n    width: 400px;\n  }\n`;\n\nexport const WrapperCircle = styled.div`\n  @media screen and (min-width: 768px) {\n    position: absolute;\n    bottom: 80px;\n    left: -55px;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: white;\n  }\n`;\n\nexport const FormContent = styled.div`\n  padding: 10px;\n  @media screen and (min-width: 480px) {\n    padding: 20px;\n  }\n`;\n\nexport const FormTitle = styled.h3`\n  width: 100%;\n  font-weight: 500;\n  font-size: 18px;\n  text-align: center;\n  color: #000000;\n  margin-bottom: 20px;\n  @media screen and (min-width: 480px) {\n    font-size: 24px;\n  }\n`;\nexport const FormLabel = styled.label`\n  color: #000000;\n  display: block;\n  margin-bottom: 10px;\n  font-size: 12px;\n  @media screen and (min-width: 480px) {\n    font-size: 14px;\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const FormInput = styled(Field)`\n  display: block;\n  width: 95%;\n  padding-left: 0 0 0 10px;\n  margin: 0 auto 20px auto;\n  background: #e9eff6;\n  line-height: 40px;\n  border-width: 1px;\n  font-size: 14px;\n  border-radius: 12px;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n  @media screen and (min-width: 480px) {\n    margin: 0 auto 40px auto;\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const FormButton = styled.button`\n  display: block;\n  margin: 0 auto;\n  width: 40%;\n  height: 40px;\n  margin: 0 auto;\n  font-family: inherit;\n  letter-spacing: 0.3ch;\n  text-transform: uppercase;\n  background: #6ca1bb;\n  border-bottom: 2px solid gray;\n  color: #000000;\n  font-size: 15px;\n  border-radius: 12px;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    background-color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    letter-spacing 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n    color: grey;\n    background-color: #eecfba;\n    letter-spacing: 0.1ch;\n  }\n  @media screen and (min-width: 480px) {\n    font-size: 15px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { FaFeather } from 'react-icons/fa';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPortal } from 'react-dom';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { IoCloseSharp } from 'react-icons/io5';\nimport { getContacts } from '../../redux/Contacts/contactSelectors';\nimport { editContact } from '../../redux/Contacts/operations';\nimport { notifyErrorIfNewContactAlreadyExists } from '../../../src/notificationMessages/notificationMessages';\nimport {\n  Overlay,\n  ModalCloseButton,\n  WrapperLeft,\n  WrapperRight,\n  FormBox,\n  WrapperCircle,\n  FormContent,\n  FormTitle,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from '../Modal/Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ onModalClose, dataContact }) => {\n  const dispatch = useDispatch();\n  const addedContacts = useSelector(getContacts);\n  document.body.style.overflow = 'hidden';\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  useEffect(() => {\n    const handleKeydown = e => {\n      if (e.code === 'Escape') {\n        onModalClose();\n      }\n    };\n    window.addEventListener('keydown', handleKeydown);\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  });\n\n  const initialValues = {\n    name: dataContact.name,\n    number: dataContact.number,\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onModalClose();\n    }\n  };\n\n  const handleEditContactFormSubmit = (values, { resetForm }) => {\n    const contactToEdit = {\n      ...values,\n      id: dataContact.id,\n    };\n\n    const editedContactAlreadyExists = addedContacts.find(\n      ({ name, id }) =>\n        name.toLowerCase() === contactToEdit.name.toLowerCase() &&\n        contactToEdit.id !== id\n    );\n\n    const contactIsNotEdited = addedContacts.find(\n      ({ name, id, number }) =>\n        name.toLowerCase() === contactToEdit.name.toLowerCase() &&\n        contactToEdit.id === id &&\n        number === contactToEdit.number\n    );\n\n    if (editedContactAlreadyExists) {\n      notifyErrorIfNewContactAlreadyExists(contactToEdit.name);\n    } else if (contactIsNotEdited) {\n      onModalClose();\n    } else {\n      dispatch(editContact(contactToEdit));\n    }\n\n    document.body.style.overflow = '';\n    resetForm();\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleEditContactFormSubmit}\n      >\n        <FormBox>\n          <ModalCloseButton type=\"button\" onClick={onModalClose}>\n            <IoCloseSharp size={40} />\n          </ModalCloseButton>\n          <WrapperLeft></WrapperLeft>\n          <WrapperRight></WrapperRight>\n          <WrapperCircle></WrapperCircle>\n          <FormContent>\n            <FormTitle>Edit the contact</FormTitle>\n            <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n            <FormInput\n              id={nameInputId}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <FormLabel htmlFor={numberInputId}>Number</FormLabel>\n            <FormInput\n              id={numberInputId}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <FormButton type=\"submit\">\n              <FaFeather style={{ marginRight: '5px' }} />\n              <span>Ok</span>\n            </FormButton>\n          </FormContent>\n        </FormBox>\n      </Formik>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  onModalClose: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactSimpleItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  text-align: start;\n  font-size: 20px;\n  font-weight: 500;\n  line-height: 1.17;\n  :not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const NameInfo = styled.span`\n  font-style: italic;\n  font-size: 25px;\n  letter-spacing: 0.1ch;\n`;\n\nexport const NumberInfo = styled.span`\n  font-size: 20px;\n  letter-spacing: 0.1ch;\n`;\n\nexport const ContactButton = styled.button`\n  padding: 7px 12px;\n  min-height: 25px;\n  flex-shrink: 0;\n  font-family: inherit;\n  text-transform: uppercase;\n  line-height: 1.17;\n  letter-spacing: 0.1ch;\n  background: #c5dde8;\n  border-bottom: 2px solid gray;\n  color: #000000;\n  border-radius: 12px;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    background-color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    color 250ms cubic-bezier(0.075, 0.82, 0.165, 1),\n    letter-spacing 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n    color: grey;\n    background-color: #eecfba;\n    letter-spacing: 0.1ch;\n  }\n  @media screen and (min-width: 480px) {\n    &:not(:last-child) {\n      margin-right: 7px;\n    }\n  }\n`;\n\nexport const ButtonBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 10px;\n  @media screen and (min-width: 480px) {\n    flex-direction: row;\n    font-size: 16px;\n  }\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    font-size: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TiContacts } from 'react-icons/ti';\nimport { getIsLoading } from '../../redux/Contacts/contactSelectors';\nimport { removeContact } from '../../redux/Contacts/operations';\nimport { Modal } from '../Modal/Modal';\nimport {\n  ContactSimpleItem,\n  NameInfo,\n  NumberInfo,\n  ContactButton,\n  ButtonBox,\n} from './ContactItem.styled';\n\nexport const ContactItem = ({ item }) => {\n  const dispatch = useDispatch();\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const isLoading = useSelector(getIsLoading);\n\n  const onRemoveContactHandler = () => {\n    try {\n      dispatch(removeContact(item.id));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onEditButtonHandlerClick = e => {\n    e.preventDefault();\n    setIsOpenModal(true);\n  };\n\n  const onModalClose = async () => {\n    setIsOpenModal(false);\n    document.body.style.overflow = '';\n  };\n\n  return (\n    <>\n      <ContactSimpleItem>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <TiContacts size={30} style={{ marginRight: '10px' }} />\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <NameInfo>{item.name}: </NameInfo>\n            <NumberInfo>{item.number}</NumberInfo>\n          </div>\n        </div>\n        <ButtonBox>\n          <ContactButton type=\"button\" onClick={onEditButtonHandlerClick}>\n            Edit\n          </ContactButton>\n          <ContactButton\n            type=\"button\"\n            disabled={isLoading}\n            onClick={onRemoveContactHandler}\n          >\n            {isLoading ? 'Deleting' : 'Delete'}\n          </ContactButton>\n        </ButtonBox>\n      </ContactSimpleItem>\n      {isOpenModal && <Modal onModalClose={onModalClose} dataContact={item} />}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  item: PropTypes.shape(\n    {\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }.isRequired\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const NoMatchesSectionTitle = styled.h2`\n  letter-spacing: normal;\n  text-transform: none;\n  font-size: 25px;\n  margin-bottom: 10px;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getIsLoading,\n} from '../../redux/Contacts/contactSelectors';\nimport { getFilterValue } from '../../redux/Contacts/filterSlice';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { Spinner } from '../Spinner/Spinner';\nimport featherImg from '../../images/feather_logo.png';\nimport { NoMatchesSectionTitle } from '../ContactList/ContactList.styled';\n\nconst ContactList = () => {\n  const addedContacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const enteredFilterValue = useSelector(getFilterValue);\n\n  const normalizeFilter = enteredFilterValue.toLowerCase();\n  const visibleContacts = addedContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizeFilter)\n  );\n  const noMatches = visibleContacts.length === 0;\n\n  return (\n    <>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <ul>\n          {visibleContacts.map(contact => (\n            <ContactItem key={contact.id} item={contact} />\n          ))}\n        </ul>\n      )}\n      {noMatches && (\n        <div>\n          <NoMatchesSectionTitle>Ooops... No matches!</NoMatchesSectionTitle>\n          <img src={featherImg} alt=\"Error\" width={100} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto 20px auto;\n`;\n\nexport const FilterLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 13px;\n  line-height: 1.17;\n`;\n\nexport const InputFilterField = styled.input`\n  padding-left: 0 0 0 10px;\n  margin-bottom: 20px;\n  background: #e9eff6;\n  line-height: 40px;\n  border-width: 1px;\n  border-radius: 15px;\n  font-size: 18px;\n  transition: box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/Contacts/filterSlice';\nimport { FilterWrapper, FilterLabel, InputFilterField } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterInputId = nanoid();\n\n  const filterHandler = e => {\n    e.preventDefault();\n    dispatch(setFilter(e.currentTarget.value.trim()));\n  };\n\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor={filterInputId}>Find contacts by name</FilterLabel>\n      <InputFilterField\n        id={filterInputId}\n        onChange={filterHandler}\n        type=\"text\"\n        name=\"filter\"\n        title=\"Filter by name\"\n      />\n    </FilterWrapper>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const MainWrapper = styled.main`\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  margin: 0 auto;\n  padding: 20px 0 20px 0;\n`;\nexport const ContactsTitle = styled.h2`\n  font-weight: 500;\n  font-size: 30px;\n  line-height: 1.33;\n  margin-bottom: 20px;\n`;\nexport const Layout = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: linear-gradient(45deg, #eecfba, #c5dde8);\n`;\n\nexport const NoContactsSectionTitle = styled.h2`\n  letter-spacing: 0.1ch;\n  font-size: 30px;\n  margin-bottom: 10px;\n`;\n\nexport const ErrorSectionTitle = styled.h2`\n  letter-spacing: 0.1ch;\n  font-size: 30px;\n  margin-bottom: 10px;\n`;\n\nexport const ErrorSectionText = styled.p`\n  letter-spacing: 0.1ch;\n  font-size: 25px;\n  margin-bottom: 10px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getIsLoading,\n  getError,\n} from '../../redux/Contacts/contactSelectors';\nimport { fetchContacts } from '../../redux/Contacts/operations';\nimport TopBox from '../../components/TopBox/TopBox';\nimport BottomBox from '../../components/BottomBox/BottomBox';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport errorImg from '../../images/error.png';\nimport emptyPhonebookImg from '../../images/no_contacts.png';\nimport {\n  MainWrapper,\n  ContactsTitle,\n  Layout,\n  NoContactsSectionTitle,\n  ErrorSectionTitle,\n  ErrorSectionText,\n} from './Contacts.styled';\n\nconst Contacts = () => {\n  const addedContacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const isError = useSelector(getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const isNotContactListEmpty = addedContacts.length > 0;\n  return (\n    <>\n      <main>\n        <Layout>\n          <MainWrapper>\n            <TopBox>\n              <ContactForm />\n            </TopBox>\n            {isNotContactListEmpty && (\n              <BottomBox>\n                <div>\n                  <ContactsTitle>Contacts</ContactsTitle>\n                  <Filter />\n                  <ContactList />\n                </div>\n              </BottomBox>\n            )}\n            {!isNotContactListEmpty && !isLoading && (\n              <BottomBox>\n                <div>\n                  <NoContactsSectionTitle>\n                    No contacts yet!\n                  </NoContactsSectionTitle>\n                  <img src={emptyPhonebookImg} alt=\"No contacts\" width={100} />\n                </div>\n              </BottomBox>\n            )}\n            {isError && !isLoading && (\n              <BottomBox>\n                <div>\n                  <ErrorSectionTitle>\n                    Sorry, something went wrong!\n                  </ErrorSectionTitle>\n                  <ErrorSectionText style={{ marginBottom: '10px' }}>\n                    Error loading the contacts\n                  </ErrorSectionText>\n                  <img src={errorImg} alt=\"Error\" width={100} />\n                </div>\n              </BottomBox>\n            )}\n          </MainWrapper>\n        </Layout>\n      </main>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","CoverBox","styled","imgWrapper","children","StyledContainer","ToastContainer","Title","PhoneForm","Form","FormLabel","InputNameField","Field","InputNumberField","FormButton","dispatch","useDispatch","addedContacts","useSelector","nameInputId","nanoid","numberInputId","initialValues","name","number","onSubmit","values","resetForm","find","toLowerCase","notifyErrorIfNewContactAlreadyExists","addNewContact","autoClose","size","htmlFor","id","type","pattern","title","required","disabled","style","marginRight","Overlay","ModalCloseButton","WrapperLeft","WrapperRight","FormBox","WrapperCircle","FormContent","FormTitle","FormInput","modalRoot","document","querySelector","Modal","onModalClose","dataContact","body","overflow","useEffect","handleKeydown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","contactToEdit","editedContactAlreadyExists","contactIsNotEdited","editContact","ContactSimpleItem","NameInfo","NumberInfo","ContactButton","ButtonBox","ContactItem","item","useState","isOpenModal","setIsOpenModal","display","alignItems","flexDirection","preventDefault","removeContact","console","log","NoMatchesSectionTitle","normalizeFilter","getFilterValue","visibleContacts","filter","includes","noMatches","length","Spinner","map","contact","src","featherImg","alt","width","FilterWrapper","FilterLabel","InputFilterField","filterInputId","onChange","setFilter","value","trim","MainWrapper","ContactsTitle","Layout","NoContactsSectionTitle","ErrorSectionTitle","ErrorSectionText","isError","fetchContacts","isNotContactListEmpty","emptyPhonebookImg","marginBottom","errorImg"],"sourceRoot":""}